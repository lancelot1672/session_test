name: CI/CD using github

# event trigger
on:
  push:
    branches: ["main", "develop" ]

permissions:
  contents: read

jobs: # job들을 정의하는 곳
  ci: # job의 id
    runs-on: ubuntu-latest # 이 job을 수행하는 OS ex. windows-latest , macos-12
    steps: # job에서 수행하는 step들을 정의하는 곳
      # Repository로부터 CI 수행 서버로 코드를 내려받는 Action
      - uses: actions/checkout@v3
      
      # step의 이름
      - name: Set up JDK 11 
        uses: actions/setup-java@v3 # jdk를 다운 받고 캐싱해주는 Action
        with: # Action에 전달하는 input을 정의하는 곳
          java-version: 11 
          distribution: 'temurin' # jdk를 제공하는 vender사 이름 ex. zulu, adopt, microsoft
          
      # 환경별 yml 파일 생성 - dev
      - name: make application-dev.yml
        if: contains(github.ref, 'main')
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.YML_DEV }}" > ./application-dev.yml
        shell: bash
        
      # Gradle caching
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew # gradlew를 실행할 수 있는 권한을 추가
        
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build -x test
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

      # docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/session-test .
          docker push ${{ secrets.DOCKER_USERNAME }}/session-test
          
      # deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
            sudo docker run -d -p 9000:9000 ${{ secrets.DOCKER_USERNAME }}/session-test
            sudo docker run -d -p 9001:9000 ${{ secrets.DOCKER_USERNAME }}/session-test
            sudo docker image prune -f
